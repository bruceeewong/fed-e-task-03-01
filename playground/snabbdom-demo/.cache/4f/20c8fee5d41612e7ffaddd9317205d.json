{"id":"node_modules/snabbdom/modules/attributes.js","dependencies":[{"name":"/Users/bruskiwang/workspace/personal/lagou/fed-e-task-03-01/playground/snabbdom-demo/node_modules/snabbdom/modules/attributes.js.map","includedInParent":true,"mtime":1598923031147},{"name":"/Users/bruskiwang/workspace/personal/lagou/fed-e-task-03-01/playground/snabbdom-demo/node_modules/snabbdom/src/modules/attributes.ts","includedInParent":true,"mtime":1598923031147},{"name":"/Users/bruskiwang/workspace/personal/lagou/fed-e-task-03-01/playground/snabbdom-demo/package.json","includedInParent":true,"mtime":1598923025002},{"name":"/Users/bruskiwang/workspace/personal/lagou/fed-e-task-03-01/playground/snabbdom-demo/node_modules/snabbdom/package.json","includedInParent":true,"mtime":1598923031147}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xmlNS = 'http://www.w3.org/XML/1998/namespace';\nvar colonChar = 58;\nvar xChar = 120;\nfunction updateAttrs(oldVnode, vnode) {\n    var key, elm = vnode.elm, oldAttrs = oldVnode.data.attrs, attrs = vnode.data.attrs;\n    if (!oldAttrs && !attrs)\n        return;\n    if (oldAttrs === attrs)\n        return;\n    oldAttrs = oldAttrs || {};\n    attrs = attrs || {};\n    // update modified attributes, add new attributes\n    for (key in attrs) {\n        var cur = attrs[key];\n        var old = oldAttrs[key];\n        if (old !== cur) {\n            if (cur === true) {\n                elm.setAttribute(key, \"\");\n            }\n            else if (cur === false) {\n                elm.removeAttribute(key);\n            }\n            else {\n                if (key.charCodeAt(0) !== xChar) {\n                    elm.setAttribute(key, cur);\n                }\n                else if (key.charCodeAt(3) === colonChar) {\n                    // Assume xml namespace\n                    elm.setAttributeNS(xmlNS, key, cur);\n                }\n                else if (key.charCodeAt(5) === colonChar) {\n                    // Assume xlink namespace\n                    elm.setAttributeNS(xlinkNS, key, cur);\n                }\n                else {\n                    elm.setAttribute(key, cur);\n                }\n            }\n        }\n    }\n    // remove removed attributes\n    // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)\n    // the other option is to remove all attributes with value == undefined\n    for (key in oldAttrs) {\n        if (!(key in attrs)) {\n            elm.removeAttribute(key);\n        }\n    }\n}\nexports.attributesModule = { create: updateAttrs, update: updateAttrs };\nexports.default = exports.attributesModule;\n"},"sourceMaps":{"js":{"version":3,"file":"attributes.js","sourceRoot":"","sources":["../src/modules/attributes.ts"],"names":[],"mappings":";;AAaA,IAAM,OAAO,GAAG,8BAA8B,CAAC;AAC/C,IAAM,KAAK,GAAG,sCAAsC,CAAC;AACrD,IAAM,SAAS,GAAG,EAAE,CAAC;AACrB,IAAM,KAAK,GAAG,GAAG,CAAC;AAElB,SAAS,WAAW,CAAC,QAAe,EAAE,KAAY;IAChD,IAAI,GAAW,EAAE,GAAG,GAAY,KAAK,CAAC,GAAc,EAChD,QAAQ,GAAI,QAAQ,CAAC,IAAkB,CAAC,KAAK,EAC7C,KAAK,GAAI,KAAK,CAAC,IAAkB,CAAC,KAAK,CAAC;IAE5C,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK;QAAE,OAAO;IAChC,IAAI,QAAQ,KAAK,KAAK;QAAE,OAAO;IAC/B,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;IAC1B,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;IAEpB,iDAAiD;IACjD,KAAK,GAAG,IAAI,KAAK,EAAE;QACjB,IAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QACvB,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAI,GAAG,KAAK,GAAG,EAAE;YACf,IAAI,GAAG,KAAK,IAAI,EAAE;gBAChB,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;aAC3B;iBAAM,IAAI,GAAG,KAAK,KAAK,EAAE;gBACxB,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;aAC1B;iBAAM;gBACL,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;oBAC/B,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBAC5B;qBAAM,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;oBAC1C,uBAAuB;oBACvB,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;iBACrC;qBAAM,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;oBAC1C,yBAAyB;oBACzB,GAAG,CAAC,cAAc,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;iBACvC;qBAAM;oBACL,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBAC5B;aACF;SACF;KACF;IACD,4BAA4B;IAC5B,gHAAgH;IAChH,uEAAuE;IACvE,KAAK,GAAG,IAAI,QAAQ,EAAE;QACpB,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE;YACnB,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;SAC1B;KACF;AACH,CAAC;AAEY,QAAA,gBAAgB,GAAG,EAAC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,EAAW,CAAC;AACrF,kBAAe,wBAAgB,CAAC","sourcesContent":["import {VNode, VNodeData} from '../vnode';\nimport {Module} from './module';\n\n// because those in TypeScript are too restrictive: https://github.com/Microsoft/TSJS-lib-generator/pull/237\ndeclare global {\n  interface Element {\n    setAttribute(name: string, value: string | number | boolean): void;\n    setAttributeNS(namespaceURI: string, qualifiedName: string, value: string | number | boolean): void;\n  }\n}\n\nexport type Attrs = Record<string, string | number | boolean>\n\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\nconst xmlNS = 'http://www.w3.org/XML/1998/namespace';\nconst colonChar = 58;\nconst xChar = 120;\n\nfunction updateAttrs(oldVnode: VNode, vnode: VNode): void {\n  var key: string, elm: Element = vnode.elm as Element,\n      oldAttrs = (oldVnode.data as VNodeData).attrs,\n      attrs = (vnode.data as VNodeData).attrs;\n\n  if (!oldAttrs && !attrs) return;\n  if (oldAttrs === attrs) return;\n  oldAttrs = oldAttrs || {};\n  attrs = attrs || {};\n\n  // update modified attributes, add new attributes\n  for (key in attrs) {\n    const cur = attrs[key];\n    const old = oldAttrs[key];\n    if (old !== cur) {\n      if (cur === true) {\n        elm.setAttribute(key, \"\");\n      } else if (cur === false) {\n        elm.removeAttribute(key);\n      } else {\n        if (key.charCodeAt(0) !== xChar) {\n          elm.setAttribute(key, cur);\n        } else if (key.charCodeAt(3) === colonChar) {\n          // Assume xml namespace\n          elm.setAttributeNS(xmlNS, key, cur);\n        } else if (key.charCodeAt(5) === colonChar) {\n          // Assume xlink namespace\n          elm.setAttributeNS(xlinkNS, key, cur);\n        } else {\n          elm.setAttribute(key, cur);\n        }\n      }\n    }\n  }\n  // remove removed attributes\n  // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)\n  // the other option is to remove all attributes with value == undefined\n  for (key in oldAttrs) {\n    if (!(key in attrs)) {\n      elm.removeAttribute(key);\n    }\n  }\n}\n\nexport const attributesModule = {create: updateAttrs, update: updateAttrs} as Module;\nexport default attributesModule;\n"]}},"error":null,"hash":"f2a6dca901a4d5c841c06775769d95d4","cacheData":{"env":{}}}